#+title Emacs Configuration
#+PROPERTY: header-args :emacs-lisp :tangle .dotfiles/.files/.emacs.d/init.el

* Package System Steup

#+begin_src emacs-lisp 

	;; Initialize package sources
	(require 'package)

	(setq package-archives '(("melpa" . "https://melpa.org/packages/")
				 ("org" . "https://orgmode.org/elpa/")
				 ("elpa" . "https://elpa.gnu.org/packages/")))

	(package-initialize)
	(unless package-archive-contents
		(package-refresh-contents))

	;; Initialize use-package on non-linux platform
	(unless (package-installed-p 'use-package)
		(package-install 'use-package))

	(require 'use-package)
	(setq use-package-always-ensure t)

#+end_src

* Important Global Steup
#+begin_src emacs-lisp

  ;; Set the source-directory
  (setq find-function-C-source-directory "~/emacs-28.2/src")

  ;; move customization variables to a separate file and load it
  (setq custom-file (locate-user-emacs-file "custom-vars.el"))
  (load custom-file 'noerror 'nomessage)


  ;; Revert buffers when the underlying file has changed
  (global-auto-revert-mode 1)

  ;; Revert Dired and other buffers
  (setq global-auto-revert-non-file-buffers t)

  ;;save what you enter into minibuffer prompts
  (setq history-length 25)
  (savehist-mode 1)

  ;; Remember and restore the last cursor location of opened files
  (save-place-mode 1)

#+end_src

* Org-mode stuff
** Initialization
#+begin_src emacs-lisp
  (require 'org)
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((java . t)
	 (python . t)))
#+end_src
** Org mode list changes
    #+begin_src emacs-lisp
			(use-package org
				:config
				(setq org-ellipsis " ▼"
							org-hide-emphasis-markers t))
    #+end_src
    
** Bullet heading
   #+begin_src emacs-lisp
	(use-package org-bullets
	  :ensure t
	  :config
	  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+end_src

** Level heading font size

   #+begin_src emacs-lisp

					(set-face-attribute 'default nil :font "Fira Code" :height 180)

					;; Set the fixed pitch face
					(set-face-attribute 'fixed-pitch nil :font "Fira Code" :height 180)

					;; Set the variable pitch face
					(set-face-attribute 'variable-pitch nil :font "Fira Code" :height 180 :weight 'regular)


		 (defun org-font-setup ()
			 ;; Replace list hyphen with dot
			 (font-lock-add-keywords 'org-mode
															 '(("^ *\\([-]\\) "
																	(0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

			 ;; Set faces for heading levels
			 (dolist (face '((org-level-1 . 1.2)
											 (org-level-2 . 1.1)
											 (org-level-3 . 1.05)
											 (org-level-4 . 1.0)
											 (org-level-5 . 1.1)
											 (org-level-6 . 1.1)
											 (org-level-7 . 1.1)
											 (org-level-8 . 1.1)))
				 (set-face-attribute (car face) nil :font "Fira Code" :weight 'regular :height (cdr face)))

			 ;; Ensure that anything that should be fixed-pitch in Org files appears that way
			 (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
			 (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
			 (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
			 (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
			 (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
			 (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
			 (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

		 (add-hook 'org-mode-hook 'org-font-setup)
   #+end_src

** Source block evaluation
   #+begin_src emacs-lisp
   (setq org-confirm-babel-evaluate nil
           org-src-fontify-natively t
           org-src-tab-acts-natively t)
   #+end_src

** Strcture Template
#+begin_src emacs-lisp

  ;;quick parser
  ;;be aware here use-pacakges won't work
   (require  'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("ja" . "src java"))
#+end_src

** Org-roam
*** Basic Config
   #+BEGIN_SRC emacs-lisp
     (use-package org-roam
	:ensure t
	:init
	(setq org-roam-v2-ack t)
	(setq org-roam-mode-section-functions
	(list #'org-roam-backlinks-section
	      #'Org-roam-reflinks-section
	      ;; #'org-roam-unlinked-references-section
	      ))
	:custom
	(org-roam-directory "~/Notes/Roam")
	(org-roam-completion-everywhere t)
	(org-roam-capture-templates
	 '(("d" "default" plain "%?"
	    :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
	    :unnarrowed t)
	   ("b" "book notes" plain
	   (file "~/Notes/Roam/Templates/BookNote.org")
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	    :unnarrowed t)
	   ("p" "programming notes" plain
	    (file "~/Notes/Roam/Templates/ProgrammingNotes.org")
	    :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: Programming")
	    :unnarrowed t)
	   ("l" "literature notes" plain
	    (file "~/Notes/Roam/Templates/LiteratureNotes.org")
	    :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: Programming")
	   )
	 ))
	:bind (("C-c n l" . org-roam-buffer-toggle)
	       ("C-c n f" . org-roam-node-find)
	       ("C-c n i" . org-roam-node-insert)
	       ("C-c n g"   . org-roam-graph)
	       :map org-mode-map
	       ("C-M-i"   . completion-at-point)
	       ("C-c n I" . org-roam-node-insert-immediate))
	:config
	(org-roam-setup))

     (defun org-roam-node-insert-immediate (arg &rest args)
       (interactive "P")
       (let ((args (cons arg args))
	     (org-roam-capture-templates (list (append (car org-roam-capture-templates)
						       '(:immediate-finish t)))))
	 (apply #'org-roam-node-insert args)))
#+END_SRC

*** For publishing
   #+begin_src emacs-lisp
(defun roam-sitemap (title list)
  (concat "#+OPTIONS: ^:nil author:nil html-postamble:nil\n"
          "#+SETUPFILE: ./simple_inline.theme\n"
          "#+TITLE: " title "\n\n"
          (org-list-to-org list) "\nfile:sitemap.svg"))

(setq my-publish-time 0)   ; see the next section for context
(defun roam-publication-wrapper (plist filename pubdir)
  (org-roam-graph)
  (org-html-publish-to-html plist filename pubdir)
  (setq my-publish-time (cadr (current-time))))

(setq org-publish-project-alist
  '(("roam"
     :base-directory "~/Notes/Roam"
     :auto-sitemap t
     :sitemap-function roam-sitemap
     :sitemap-title "Roam notes"
     :publishing-function roam-publication-wrapper
     :publishing-directory "~/roam-export"
     :section-number nil
     :table-of-contents nil
     :style "<link rel=\"stylesheet\" href=\"../other/mystyle.cs\" type=\"text/css\">")))
   #+end_src
*** For Preview
** ~.html~ preview
[[https://github.com/jakebox/org-preview-html][GitHub Repo]]
#+begin_src emacs-lisp

  (use-package org-preview-html)

  ;; Set the default browser to xwidget
  (setq-default org-preview-html-viewer 'xwidget)
  (setq-default org-preview-html-refresh-configuration 'save)
#+end_src

** ~.md~ Preview
[[https://github.com/seagle0128/grip-mode/tree/e1e8ee952f75cdca93327b6e7dcd79244ca66bc0#limitations][Github
Repo]]
#+begin_src emacs-lisp
(use-package grip-mode)
#+end_src

** Other Stuff

  #+BEGIN_SRC emacs-lisp

		;;ibuffer
		(defalias 'list-buffers 'ibuffer-other-window) 


		;; ace-window
		;;I personally seem to like this one more...
		(windmove-default-keybindings)

		(use-package ace-window
			:ensure t
			:init
			(progn
				(global-set-key [remap other-window] 'ace-window)
				(custom-set-faces
				 '(aw-leading-char-face
					 ((t (:inherit ace-jump-face-foreground :height 3.0)))))
				))

		;;swiper

		(use-package counsel
			:ensure t
			)



		;; another powerful search tool
		(use-package avy
			:ensure t
			:bind ("M-s" . avy-goto-char))

		;;auto-completion
		(use-package auto-complete
			:ensure t
			:init
			(progn
				(ac-config-default)
				(global-auto-complete-mode t)
				))
  #+END_SRC

** For Research
*** Org-Brain
[[https://github.com/Kungsgeten/org-brain][More Setting Availiable in GitRepo]]

#+begin_src emacs-lisp
  (use-package org-brain
    :ensure t
    :init
    (setq org-brain-path "~/Notes/")
    :config
    (bind-key "C-c b" "~/Notes")
    (setq org-id-track-globally t)
    (setq org-id-locations-file "~/.emacs.d/.org-id-locations")
    (add-hook 'before-save-hook 'org-brain-ensure-ids-in-buffer)
    (setq org-brain-visualize-default-choices 'all)
    (setq org-brain-title-max-length 12)
    (setq org-brain-include-file-entries nil
	  org-brain-file-entries-use-title nil))

  ;; Allows you to edit entries directly from org-brain-visualize
  (use-package polymode
    :config
    (add-hook 'org-brain-visualize-mode-hook 'org-brain-polymode))
#+end_src

* Keys Binding
** Global Key Bindings
#+begin_src emacs-lisp
  (global-set-key (kbd "<f5>") 'revert-buffer)
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key (kbd "C-M-j") 'counsel-switch-buffer)

;;org-mode related

(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c C-l") 'org-insert-link)

#+end_src

** Which-key

which-key is  a useful UI panel  that appears when you  start pressing
any key binding in Emacs to offer you all possible completions for the
prefix. For  example, if  you press  C-c (hold  control and  press the
letter c), a  panel will appear at the bottom  of the frame displaying
all of the bindings under that prefix and which command they run. This
is very useful  for learning the possible key bindings  in the mode of
your current buffer.

  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t
      :config (which-key-mode))
  #+END_SRC

** Customizing keys (not working)
  #+begin_src emacs-lisp
      (use-package general
     :ensure t
     :config
     (general-create-definer rune/leader-keys
       :keymaps '(normal insert visual emacs)
       :prefix "SPC"
       :global-prefix "C-SPC")
    (rune/leader-keys
     "t" '(:ignore t :which-key "toglles")
     "tt" '(counsel-load-theme :which-key "choose theme")))
  #+end_src

* General Improvement of UI 
** Opening Frame

#+begin_src emacs-lisp

(add-to-list 'default-frame-alist '(height . 200))
(add-to-list 'default-frame-alist '(width . 200))
(setq mac-command-modifier      'meta
      mac-option-modifier       'alt
      mac-right-option-modifier 'alt) 


#+end_src

** Interface tweaks

#+BEGIN_SRC emacs-lisp

  ;; Don't show the splash screen
  (setq Inhibit-startup-message t)

  ;; don't flash whent he bell rings
  (setq visible-bell nil) 

  ;; hide the tool-bar-mode
  (tool-bar-mode -1)

  (fset 'yes-or-no-p 'y-or-n-p)
  (setq org-image-actual-width nil)
  (global-display-line-numbers-mode 1)

  ;;store the recently opened files in order
  (recentf-mode 1)

  (when (fboundp 'electric-indent-mode) (electric-indent-mode -1))
  (add-hook 'org-mode-hook 'turn-on-auto-fill)

  ;; Don't pop up UI dialogs when prompting
  (setq use-dialog-box nil)

  ;; The the global scale tab-width
  (setq-default tab-width 2)

#+END_SRC

** Mode line Config

   #+begin_src emacs-lisp
     (use-package doom-modeline
       :ensure t
       :hook (after-init . doom-modeline-mode)
       :custom ((doom-modeline-height 15)))
   #+end_src  

   #+RESULTS:
   | doom-modeline-mode | tramp-register-archive-file-name-handler |
  
** Theme

   #+begin_src emacs-lisp

(use-package doom-themes
  :init (load-theme 'doom-dracula t))

   #+end_src

   #+RESULTS:

** All the icons
   #+begin_src emacs-lisp
(use-package all-the-icons)
   #+end_src

** Better Nevi
#+begin_src emacs-lisp

;;neivigating throught lines
(column-number-mode)

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook 
		term-mode-hook
		eshell-mode-hook))
  (add-hook mode (lambda ()(display-line-numbers-mode 0))))

#+end_src

** Coding
   #+begin_src emacs-lisp
     (use-package rainbow-delimiters
       :hook (prog-mode . rainbow-delimiters-mode))
   #+end_src

* HashTag
  #+begin_src emacs-lisp
    (use-package deft
      :commands (deft)
      :config (setq deft-directory "~/Notes/Roam"
		    deft-recursive t
		    deft-extensions '("md" "org"))
      :bind
      ("C-c n d" . deft)
      :custom
      (deft-recursive t)
      (deft-use-filter-string-for-filename t)
      (deft-default-extension "org")
      (deft-directory org-roam-directory))
  #+end_src

* Must Have
** Do Interactively
#+begin_src emacs-lisp
	(setq ido-enable-flex-matching t)
	(setq ido-everywhere t)
	(ido-mode 1)
#+end_src
** Searching  
*** Ivy and counsel
   #+begin_src emacs-lisp

(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package ivy-rich
  :init
  (ivy-rich-mode 1))

(use-package counsel
  :bind (("C-M-j" . 'counsel-switch-buffer)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :config
  (counsel-mode 1))
   #+end_src

   #+RESULTS:
   : counsel-minibuffer-history

counsel, ivy and swiper usually come tgh, and is a useful completion framework.
  #+begin_src emacs-lisp
(use-package swiper
  :ensure try
  :config
  (progn
    (ivy-mode)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    ;; enable this if you want `swiper' to use it
    ;; (setq search-default-mode #'char-fold-to-regexp)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
    (global-set-key (kbd "<f1> l") 'counsel-find-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
    ))
  #+end_src

*** Vertico

   light-weighted, integrating with built in emacs completion engine

     #+begin_src emacs-lisp
       (use-package vertico
	 :ensure t
	 :bind (:map vertico-map
		("C-j" . vertico-next)
		("C-k" . vertico-previous)
		("C-f" . vertico-exit)
		:map minibuffer-local-map
		("M-h" . backward-kill-word))
	 :custom
	 (vertico-cycle t)
	 :init
	 (vertico-mode))

       (use-package savehist
	 :init
	 (savehist-mode))

       (use-package marginalia
	 :after vertico
	 :ensure t
	 :custom
	 (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
	 :init
	 (marginalia-mode))
     #+end_src

     #+RESULTS:

* Terminal
** Term-mode

   #+begin_src emacs-lisp

     (use-package term
       :config
       (setq explicit-shell-file-name "zsh") ;; Change this to zsh, etc
       ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args

       ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
       (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
     )

   #+end_src

** Eshell

   #+begin_src emacs-lisp

     (use-package eshell-git-prompt)

     (use-package eshell

     :config
     (eshell-git-prompt-use-theme 'powerline))
   #+end_src

* File management
** dired
   #+begin_src emacs-lisp

     (use-package all-the-icons-dired)
       (use-package dired-rainbow
	 :defer 2
	 :config
	 (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
	 (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
	 (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
	 (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
	 (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
	 (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
	 (dired-rainbow-define media "#de751f" ("mp3" "mp4" "mkv" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
	 (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
	 (dired-rainbow-define log "#c17d11" ("log"))
	 (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
	 (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
	 (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
	 (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
	 (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
	 (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
	 (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
	 (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
	 (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
	 (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
	 (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*"))

       (use-package dired-single
	 :defer t)

       (use-package dired-ranger
	 :defer t)

       (use-package dired-collapse
	 :defer t)


	  (use-package dired-single)

	  (use-package all-the-icons-dired
	    :hook (dired-mode . all-the-icons-dired-mode))

	  (use-package dired-open
	    :config
	    ;; Doesn't work as expected!
	    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
	    (setq dired-open-extensions '(("png" . "feh")
					  ("mkv" . "mpv"))))

   #+end_src
* Reveal.js
 #+BEGIN_SRC emacs-lisp
   (use-package ox-reveal
     :ensure ox-reveal)

   (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
   (setq org-reveal-mathjax t)

   (use-package htmlize
     :ensure t)
 #+END_SRC

* Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))
#+END_SRC

* Yasnippet
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :init
      (yas-global-mode 1))
  #+END_SRC
 
* Undo Tree

 #+begin_src emacs-lisp
      (use-package undo-tree
      :ensure t
      :init
      (global-undo-tree-mode))
 #+end_src

* try
  #+BEGIN_SRC emacs-lisp
    (use-package try
      :ensure t)
  #+END_SRC

  #+RESULTS:
  
* Misc packages
#+begin_src emacs-lisp
  ; Becon mode
  ; flashes the cursor's line when you scroll
  (use-package beacon
    :ensure t
    :config
    (beacon-mode 2)
  ; this color looks good for the zenburn theme but not for the one
  ; I'm using for the videos
  ; (setq beacon-color "#666600")
  )

  ; Hungty Deleteo Mode
  ; deletes all the whitespace when you hit backspace or delete
  (use-package hungry-delete
    :ensure t
    :config
    (global-hungry-delete-mode))


  ; expand the marked region in semantic increments (negative prefix to reduce region)
  (use-package expand-region
    :ensure t
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))


  (use-package iedit
    :ensure t)

#+end_src
* Project Management
  #+begin_src emacs-lisp

(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/Projects/Code")
    (setq projectile-project-search-path '("~/Projects/Code")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :config (counsel-projectile-mode))

  #+end_src
* Babel Stuff
** Python autocompletion
  #+BEGIN_SRC emacs-lisp
    (use-package jedi
      :ensure t
      :init
      (add-hook 'python-mode-hook 'jedi:setup)
      (add-hook 'python-mode-hook 'jedi:ac-setup))
#+END_SRC
* Keep .emacs.d clean
  #+begin_src emacs-lisp
    ;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
    (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
	  url-history-file (expand-file-name "url/history" user-emacs-directory))

    ;; Use no-littering to automatically set common paths to the new user-emacs-directory
    (use-package no-littering)

    ;; Keep customization settings in a temporary file (thanks Ambrevar!)
    (setq custom-file
	  (if (boundp 'server-socket-dir)
	      (expand-file-name "custom.el" server-socket-dir)
	    (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
    (load custom-file t)
  #+end_src

* Blogging
  #+begin_src emacs-lisp
(use-package ox-hugo
  :ensure t            ;Auto-install the package from Melpa (optional)
  :after ox)
(setq org-export-with-broken-links t)
  #+end_src

  #+RESULTS:
  : t

* Helpful

#+begin_src emacs-lisp
    (use-package helpful)

  ;; Note that the built-in `describe-function' includes both functions
  ;; and macros. `helpful-function' is functions only, so we provide
  ;; `helpful-callable' as a drop-in replacement.
  (global-set-key (kbd "C-h f") #'helpful-callable)

  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)
  (global-set-key (kbd "C-h o") #'helpful-symbol)

  (setq counsel-describe-function-function #'helpful-callable)
  (setq counsel-describe-variable-function #'helpful-variable)
#+end_src

* Auto Tangle
#+begin_src emacs-lisp
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
			(expand-file-name "~/.dotfiles/.files/.emacs.d/Myinit.org"))
    (let ((org-confim-babel-evaluate nil))
      (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

